name: Reusable build frontend code and send it to a specified AWS EC2 instance

on:
  workflow_call:
    inputs:
      repo-name:
        description: 'name of repository'
        required: true
        type: string
      node-version:
        description: 'Node version'
        required: true
        type: string
      build-command:
        description: 'Build command'
        required: true
        type: string
      s3-aws-region:
        description: 'AWS Region for S3 Bucket'
        required: true
        type: string

    secrets:
      AWS_TARGET_ACCOUNT:
        description: 'AWS Account for ECR Repository'
        required: true
      EC2_SSH_KEY:
        description: 'Name of the EC2 SSH Key'
        required: true
      EC2_USER:
        description: 'User for EC2 Instance'
        required: true
      EC2_HOST:
        description: 'Hostname of the EC2 Instance'
        required: true
      CLOUDFLARE_API_TOKEN:
        description: 'Cloudflare API Token'
        required: true
      CLOUDFLARE_ZONE_ID:
        description: 'Cloudflare Zone ID'
        required: true

env:
  AWS_DEFAULT_DEPLOYMENT_PATH: /data/treasurenet

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Assume role in target account
        id: assume-role-target
        run: |
          ROLE_ARN="arn:aws:iam::${{ secrets.AWS_TARGET_ACCOUNT }}:role/iac-role"
          CREDS=$(aws sts assume-role --role-arn $ROLE_ARN --role-session-name GitHubAction --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text)
          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | cut -d ' ' -f 1)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | cut -d ' ' -f 2)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | cut -d ' ' -f 3)" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Build code
        run: |
          npm install --silent
          npm run ${{ inputs.build-command }} --slient

      - name: Set up ssh key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa    

      - name: Archive files
        run: |
          tar -zcvf ./dist_${{ inputs.repo-name }}.tar.gz -C dist .

      - name: Install AWS CLI
        uses: aws-actions/aws-cli-action@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.s3-aws-region }}
          version: 2

      - name: Upload Archive file to S3
        run: |
          TIMESTAMP=$(date '+%Y%m%d')
          aws s3 cp ./dist_${{ inputs.repo-name }}.tar.gz s3://tn-deployment-file-archive/${{ inputs.repo-name }}/$TIMESTAMP/dist_${{ inputs.repo-name }}.tar.gz

      - name: Copy archive to server
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ./dist_${{ inputs.repo-name }}.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/dist_${{ inputs.repo-name }}.tar.gz

      - name: Extract and replace files
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            mkdir -p ${{ env.AWS_DEFAULT_DEPLOYMENT_PATH }}/${{ inputs.repo-name }}
            rm -rf ${{ env.AWS_DEFAULT_DEPLOYMENT_PATH }}/${{ inputs.repo-name }}/*
            tar -zxvf /home/${{ secrets.EC2_USER }}/dist_${{ inputs.repo-name }}.tar.gz -C ${{ env.AWS_DEFAULT_DEPLOYMENT_PATH }}/${{ inputs.repo-name }}
            rm -rf ${{ env.AWS_DEFAULT_DEPLOYMENT_PATH }}/${{ inputs.repo-name }}/dist_${{ inputs.repo-name }}.tar.gz
          EOF

      - name: Purge Cloudflare Cache
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/purge_cache" \
          -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
          -H "Content-Type: application/json" \
          --data '{"purge_everything":true}'    
