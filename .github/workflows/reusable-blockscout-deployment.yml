name: Deploy Blockscout

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_MANAGEMENT_ACCOUNT }}:role/${{ inputs.gha-role-name }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ inputs.ecr-repo-aws-region }}

      - name: Assume role in target account
        id: assume-role-target
        run: |
          ROLE_ARN="arn:aws:iam::${{ secrets.AWS_TARGET_ACCOUNT }}:role/iac-role"
          CREDS=$(aws sts assume-role --role-arn $ROLE_ARN --role-session-name GitHubAction --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text)
          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | cut -d ' ' -f 1)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | cut -d ' ' -f 2)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | cut -d ' ' -f 3)" >> $GITHUB_ENV

      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Retrieve secrets from AWS Secrets Manager
        id: retrieve-secrets
        run: |
          SECRET_STRING=$(aws secretsmanager get-secret-value --secret-id ${{ inputs.aws-secret-name }}_blockscout --region ${{ inputs.ecr-repo-aws-region }} --query SecretString --output text)
          echo $SECRET_STRING | jq -r 'to_entries | .[] | "yq eval \".\(.key) = \"\(.value|tostring)\"\" -i ./docker-compose/envs/common-blockscout.yaml"' | sh
          SECRET_STRING=$(aws secretsmanager get-secret-value --secret-id ${{ inputs.aws-secret-name }}_stats --region ${{ inputs.ecr-repo-aws-region }} --query SecretString --output text)
          echo $SECRET_STRING | jq -r 'to_entries | .[] | "yq eval \".\(.key) = \"\(.value|tostring)\"\" -i ./docker-compose/envs/common-stats.yaml"' | sh

      - name: Set up ssh key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Archive files
        run: |
          tar -zcvf ./${{ inputs.repo-name }}.tar.gz -C docker-compose .

      - name: Update image in Docker Compose and redeploy
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ inputs.repo-name }}.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/${{ inputs.repo-name }}.tar.gz
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            mkdir -p ${{ env.AWS_DEFAULT_DEPLOYMENT_PATH }}/${{ inputs.ecr-repo }}
            cd ${{ env.AWS_DEFAULT_DEPLOYMENT_PATH }}/${{ inputs.ecr-repo }}
            tar -zxvf /home/${{ secrets.EC2_USER }}/${{ inputs.repo-name }}.tar.gz ./
            docker-compose down
            docker-compose pull
            docker-compose up -d
          EOF