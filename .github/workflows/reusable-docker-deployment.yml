name: Reusable workflow to deploy Docker image on AWS EC2 instance

on:
  workflow_call:
    inputs:
      gha-role-name:
        description: 'Name of the IAM Role to assume in the AWS Management Account'
        required: true
        type: string
      ecr-repo:
        description: 'name of the ECR repository'
        required: true
        type: string
      ecr-repo-aws-region:
        description: 'AWS Region for ECR Repository'
        required: true
        type: string
      aws-secret-name:
        description: 'Name of the secret in AWS Secrets Manager'
        required: true
        type: string
      composefile-path:
        description: 'Path to the docker-compose.yml file'
        required: true
        type: string
    secrets:
      AWS_MANAGEMENT_ACCOUNT:
        description: 'AWS Account ID for OIDC Integration (AWS CICD Account)'
        required: true
      AWS_TARGET_ACCOUNT:
        description: 'AWS Account for ECR Repository'
        required: true
      AWS_REGION:
        description: 'AWS Region for Secrets Manager'
        required: true
      EC2_SSH_KEY:
        description: 'Name of the EC2 SSH Key'
        required: true
      EC2_USER:
        description: 'User for EC2 Instance'
        required: true
      EC2_HOST:
        description: 'Hostname of the EC2 Instance'
        required: true

env:
  AWS_DEFAULT_DEPLOYMENT_PATH: /data/treasurenet

# Permission can be added at job level or workflow level
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_MANAGEMENT_ACCOUNT }}:role/${{ inputs.gha-role-name }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ inputs.ecr-repo-aws-region }}

      - name: Assume role in target account
        id: assume-role-target
        run: |
          ROLE_ARN="arn:aws:iam::${{ secrets.AWS_TARGET_ACCOUNT }}:role/iac-role"
          CREDS=$(aws sts assume-role --role-arn $ROLE_ARN --role-session-name GitHubAction --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text)
          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | cut -d ' ' -f 1)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | cut -d ' ' -f 2)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | cut -d ' ' -f 3)" >> $GITHUB_ENV

      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Retrieve secrets from AWS Secrets Manager
        id: retrieve-secrets
        run: |
          SECRET_STRING=$(aws secretsmanager get-secret-value --secret-id ${{ inputs.aws-secret-name }} --region ${{ inputs.ecr-repo-aws-region }} --query SecretString --output text)
          echo "${SECRET_STRING}" | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' > .env

      - name: Set up ssh key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Update image in Docker Compose and redeploy
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{inputs.composefile-path}} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/${{ inputs.ecr-repo }}.yml
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/${{ inputs.ecr-repo }}.env
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            export IMAGE_TAG=${{ github.sha }}
            mkdir -p ${{ env.AWS_DEFAULT_DEPLOYMENT_PATH }}/${{ inputs.ecr-repo }}
            cd ${{ env.AWS_DEFAULT_DEPLOYMENT_PATH }}/${{ inputs.ecr-repo }}
            mv /home/ec2-user/${{ inputs.ecr-repo }}.yml ./docker-compose.yml
            mv /home/ec2-user/${{ inputs.ecr-repo }}.env ./.env
            sed -i 's@image: .*$@image: ${{ secrets.ECR_REGISTRY }}/${{ inputs.ecr-repo }}:${IMAGE_TAG}@' docker-compose.yml
            docker-compose down
            docker-compose pull
            docker-compose up -d
          EOF
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}