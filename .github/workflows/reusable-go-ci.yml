name: Reusable Go CI/CD

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version'
        required: false
        default: '1.22'
        type: string
      working-directory:
        description: 'Working directory for Go module'
        required: false
        default: '.'
        type: string
      run-tests:
        description: 'Run unit tests'
        required: false
        default: true
        type: boolean
      run-gosec:
        description: 'Run gosec security scan'
        required: false
        default: true
        type: boolean
      run-vuln-check:
        description: 'Run vulnerability check'
        required: false
        default: true
        type: boolean
      skip-test-coverage:
        description: 'Skip test coverage check'
        required: false
        default: false
        type: boolean
      coverage-threshold:
        description: 'Minimum test coverage percentage'
        required: false
        default: '70'
        type: string

jobs:
  test:
    if: ${{ inputs.run-tests }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ inputs.working-directory }}
        run: go mod download

      - name: Verify dependencies
        working-directory: ${{ inputs.working-directory }}
        run: go mod verify

      - name: Run tests
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.skip-test-coverage }}" = "false" ]; then
            go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          else
            go test -v -race ./...
          fi

      - name: Check test coverage
        if: ${{ !inputs.skip-test-coverage }}
        working-directory: ${{ inputs.working-directory }}
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          THRESHOLD=${{ inputs.coverage-threshold }}
          echo "Test coverage: ${COVERAGE}%"
          echo "Required threshold: ${THRESHOLD}%"
          
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Test coverage ${COVERAGE}% is below required threshold ${THRESHOLD}%"
            exit 1
          else
            echo "✅ Test coverage ${COVERAGE}% meets required threshold ${THRESHOLD}%"
          fi

  security-scan:
    if: ${{ inputs.run-gosec }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: './...'

  vulnerability-check:
    if: ${{ inputs.run-vuln-check }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run vulnerability check
        working-directory: ${{ inputs.working-directory }}
        run: govulncheck ./...

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ inputs.working-directory }}
        run: go mod download

      - name: Build
        working-directory: ${{ inputs.working-directory }}
        run: go build -v ./...

      - name: Check go mod tidy
        working-directory: ${{ inputs.working-directory }}
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain)" ]; then
            echo "❌ go mod tidy resulted in changes. Please run 'go mod tidy' and commit the changes."
            git diff
            exit 1
          fi
          echo "✅ go mod tidy check passed"